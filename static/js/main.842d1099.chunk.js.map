{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","constants.js","Containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.842d1099.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    // if (true){\r\n    //     throw new Error('I mean...');\r\n    // }\r\n    return(\r\n        <div>{\r\n            robots.map((user, i)=> {\r\n                return(\r\n                    <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                    />\r\n                ); \r\n            })        \r\n        }</div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) =>{\r\n    return(\r\n        <div className='pa2'>\r\n           <input className = 'pa3 ba b--green bg-lightest-blue'\r\n           type='search' \r\n           placeholder='search robots'\r\n           onChange={searchChange}\r\n           />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY : 'scroll', border: '1px solid black', height : '500px'}}>\r\n            {props.children}\r\n        </div>      \r\n    );\r\n};\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\n\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{    \r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return isPending ?\r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className = 'f1'>Robofriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>    \r\n                    <Scroll>\r\n                        <CardList robots ={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); ","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\nconst initialStateSearch ={\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state,{ isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}